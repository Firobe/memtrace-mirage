/* CTF 1.8 */

typealias integer {size = 8;}  := uint8_t;
typealias integer {size = 16;} := uint16_t;
typealias integer {size = 32;} := uint32_t;
typealias integer {size = 64;} := uint64_t;
typealias integer {size = 8; signed = true;}  := int8_t;
typealias integer {size = 16; signed = true;} := int16_t;
typealias integer {size = 32; signed = true;} := int32_t;

typealias struct {
  enum : uint8_t
    { u8 = 0...252, u16 = 253, u32 = 254, u64 = 255 } tag;
  variant <tag> {
    struct {} u8;
    uint16_t u16;
    uint32_t u32;
    uint64_t u64;
  } value;
} := vint;

clock {
  name = clk;
  freq = 1000000; /* microsecs */
  offset_s = 0;
};

typealias integer {
  size = 64;
  map = clock.clk.value;
} := clk64;

trace {
  major = 1;
  minor = 8;
  byte_order = le;
  packet.header := struct {
    uint32_t magic;
    /* Support multiple streams? */
    /* mention trace UUID? */
  };
};

stream {
  packet.context := struct {
    uint32_t packet_size;
    uint32_t content_size;
    clk64 timestamp_begin;
    clk64 timestamp_end;
    uint64_t alloc_id_begin;
    uint64_t alloc_id_end;
  };
  event.header := struct {
    integer {size=25; align=1; signed=false; map=clock.clk.value;} timestamp;
    integer {size=7; align=1; signed=false;} id;
  };
};

typealias struct {
  integer {size=20; align=1; signed=false;} line;
  integer {size=12; align=1; signed=false;} start_char;
  integer {size=12; align=1; signed=false;} end_char;
  enum : integer {size=4; align=1; signed=false;}
    { mtf = 0...14, newname = 15 } filename;
  variant <filename> {
    struct {} mtf;
    string newname;
  } opt_filename;
} := location;

event {
  id = 0;
  name = "location";
  stream_id = 0;
  fields := struct {
    uint64_t code;
    uint8_t nlocs;
    location locs[nlocs];
  };
};

typealias struct {
  enum : integer {size=1; align=1; signed=false;} { hit = 0, miss = 1 } tag;
  integer {size=15; align=1; signed=false;} cache_bucket;
  variant <tag> {
    uint64_t miss;
    uint8_t hit;
  } v;
} := backtrace_code;

event {
  id = 1;
  name = "alloc";
  stream_id = 0;
  fields := struct {
    vint length;
    vint samples;
    uint8_t is_major;
    vint common_prefix; /* number of slots shared by previous alloc */
    uint16_t new_suffix; /* number of new slots */
    backtrace_code backtrace[new_suffix];
  };
};

event {
  id = 2;
  name = "promote";
  fields := struct {
    vint obj_id_delta;
  };
};

event {
  id = 3;
  name = "collect";
  fields := struct {
    vint obj_id_delta;
  };
};

